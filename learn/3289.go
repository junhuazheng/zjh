//Go语言通道（chan）————goroutine之间通信的管道

//为什么要使用通道
//单纯地将函数并发执行时没有意义的
//函数与函数之间需要交换数据才能体现并发执行函数的意义。
//虽然可以使用共享内存进行数据交换，但是共享内存在不同的goroutine中容易发生竞态问题
//为了保证数据交换的正确性，必须使用互斥量对内存进行枷锁，这种做法势必造成性能问题。

//Go语言提倡使用通信的方法代替共享内存，这里通信的方法就是使用通道（channel）
//goroutine————》channel————》goroutine————》channel————》goroutine

//多个goroutine为了争抢数据，势必造成执行的低效率，使用队列的方式是最高效的，channel就是一种队列一样的结构

//通道的特性
//Go语言中的通道（channel）是一种特殊的类型。
//在任何时候，同时只能有一个goroutine访问通道并行发送和获取数据。
//goroutine间通过通道就可以通信

//通道就像一个传送带或者队列，总是遵循先入先出（Fist in Fist Out)的规则，保证收发数据的顺序

//声明通道类型
//通道本身需要一个类型进行修饰，就像切片类型需要标识元素类型，通道的元素类型就是在其内部传输的数据类型

var 通道变量 chan 通道类型

//通道类型：通道内的数据类型
//通道变量： 保存通道的变量

//创建通道
//通道是引用类型，需要使用make进行创建，格式如下：

通道实例 := make(chan 数据类型)

//数据类型：通道内传输的元素类型
//通道实例：通过make创建的通道句柄
